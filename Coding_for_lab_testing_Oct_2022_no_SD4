//* Lab testing for KIT0139 and OTT PLS water level sensors
//* UINSING ARDUINO MKR WAN 1310, DFR0553, MT3608, KIT0139, OTT PLS, ARDUINO MKR MEM SHIELD

#include <SDI12.h>  //library for OTT PLS
#define SERIAL_BAUD 9600    
#define DATA_PIN 5 
SDI12 mySDI12(DATA_PIN); 

#include <Adafruit_ADS1X15.h> // from https://learn.adafruit.com/adafruit-4-channel-adc-breakouts/arduino-code
Adafruit_ADS1115 ads1;  //Construct an ads1115 
Adafruit_ADS1115 ads2;  //Construct another ads1115


//SDI 12 commands
#define myComAdress   "?!"    //ask the adress of the probe
#define myComId       "0I!"   //ask the identification
#define myComMeasure  "0M!"   //ask to start a measurement
#define myComSend     "0D0!"  //ask to send the measure
#define myComSetUnitCM  "0OSU+0!"  //set the unit
#define myComUnit     "0OSU!" //ask for the unit of the measure, +0=m, +1=cm, +2=ft, +3=mbar, +4=psi

//ADS1115 readings
int16_t levelCount1 = 0; //For ads1
int16_t levelCount2 = 0; //For ads1
int16_t levelCount3 = 0; //For ads1
int16_t levelCount4 = 0; //For ads2
int16_t levelCount5 = 0; //For ads2
int16_t levelCount6 = 0; //For ads2


String readsensor(){ 
  String sdiResponse = "";
  delay(30);
  while(mySDI12.available()){    
    char c = mySDI12.read();
    if ((c != '\n') && (c != '\r')) { sdiResponse += c; delay(5); }    
  }
  return sdiResponse;
}

void measREFsensor(){
  delay(300);      
  mySDI12.sendCommand(myComMeasure);
  while(mySDI12.available()){ mySDI12.read();}    
  delay(1000);    
  mySDI12.clearBuffer();   
  delay(500);
  mySDI12.sendCommand(myComSend);  
  delay(50);
  String rawdata = readsensor();
  mySDI12.clearBuffer();   
  delay(50); 
  
  //Decoding string sent from probe  
  int p=0;
  int pos[] = {0,0};
  for (int z=0 ; z<rawdata.length() ; z++)  {
    char u = rawdata.charAt(z);
    if (u == '+' || u == '-') {
      pos[p] = z ;
      p++; 
    } 
    delay (50);
  }    

  float RealRefLevel = (rawdata.substring(pos[0],pos[1])).toFloat()-1;  //Water level from the reference sensor (without correction)
  String Temperature = rawdata.substring(pos[1],rawdata.length()); //Water temperature from the reference sensor
   
  Serial.print("PLS Raw Data:");
  Serial.println(rawdata);
  delay(50);                         
}


void StartRefSensor(){
  mySDI12.begin();
  delay(2000); 
  
  Serial.print(F("'**** Identification of the sensor: "));
  mySDI12.sendCommand(myComId);
  delay(300);
  Serial.println(readsensor());
  delay(500);
  mySDI12.clearBuffer();
  
  Serial.print(F("'**** Adress of the sensor: "));
  mySDI12.sendCommand(myComAdress);
  delay(300);
  Serial.println(readsensor());
  delay(500);
  mySDI12.clearBuffer();

  Serial.print(F("'**** Set the unit of the sensor to be m: "));
  mySDI12.sendCommand(myComSetUnitCM);
  delay(300);
  Serial.println(readsensor());
  delay(500);
  mySDI12.clearBuffer();
  
  Serial.print(F("'**** Unit 0+(0=m, 1=cm, 2=ft, 3=mbar, 4=psi): "));  
  mySDI12.sendCommand(myComUnit);
  delay(300);
  Serial.println(readsensor());
  delay(500);
  mySDI12.clearBuffer();
  }

void StartADSSensor() {
 ads1.begin(0x48); // Initialize ads1115 at the default address 0x48
 ads2.begin(0x49);// Initialize ads1115 at the address 0x49
}

void measADS1115(){

  levelCount1 = ads1.readADC_SingleEnded(1);  
  levelCount2 = ads1.readADC_SingleEnded(2);
  levelCount3 = ads1.readADC_SingleEnded(3);
  levelCount4 = ads2.readADC_SingleEnded(1);
  levelCount5 = ads2.readADC_SingleEnded(2);
  levelCount6 = ads2.readADC_SingleEnded(3);
  Serial.print("\tAnalog1: "); Serial.print(levelCount1); 
  Serial.print("\tAnalog2: "); Serial.print(levelCount2); 
  Serial.print("\tAnalog3: "); Serial.print(levelCount3); 
  Serial.print("\tAnalog4: "); Serial.print(levelCount4); 
  Serial.print("\tAnalog5: "); Serial.print(levelCount5); 
  Serial.print("\tAnalog6: "); Serial.print(levelCount6); 
  Serial.println();
  delay(500);
}

void setup() {
      Serial.begin(9600);
      while (!Serial) {
   ; // wait for serial port to connect. Needed for native USB 
   }
      StartRefSensor();
      StartADSSensor();
    }

void loop() {
   measREFsensor();
   measREFsensor();
   measREFsensor();
   measREFsensor();
   measREFsensor();
  for (int i = 0; i <= 100; i++){
    delay(100);
    measADS1115();
    delay(100);
}
   measREFsensor();
   measREFsensor();
   measREFsensor();
   measREFsensor();
   measREFsensor();
  while(1){}
}
